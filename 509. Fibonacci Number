Code : 
class Solution:
    def fib(self, n: int) -> int:
        memo = {0:0, 1:1} 

        def f(x):
            if x in memo: 
                return memo[x] 
            else: 
                memo[x] = f(x-1) + f(x-2) 
                return memo[x] 
            
        return f(n) 

Explanation : 

### âœ… **Explanation of Your Code in Simple Terms**

---

### ðŸ“Œ **1. The Main Function:**
```python
class Solution:
    def fib(self, n: int) -> int:
```
- You have a class `Solution` with a method `fib()` that takes an integer `n` as input.  
- The goal is to return the **nth Fibonacci number**.

---

### ðŸ“Œ **2. Memoization Dictionary:**
```python
memo = {0: 0, 1: 1}
```
- This dictionary stores the **Fibonacci values** that have already been calculated.
- It starts with the base cases:
  - \( \text{{fib(0)}} = 0 \)  
  - \( \text{{fib(1)}} = 1 \)  

---

### ðŸ“Œ **3. The Recursive Function:**
```python
def f(x):
    if x in memo: 
        return memo[x]
```
- This is the **helper function** `f(x)` that calculates the Fibonacci value for `x`.
- **If `x` is already in the `memo` dictionary:**  
    â†’ It simply **returns the stored value**.  
    â†’ This avoids recalculating values you already know, making the code faster.

---

### ðŸ“Œ **4. Calculating Fibonacci Recursively:**
```python
else: 
    memo[x] = f(x - 1) + f(x - 2)
    return memo[x]
```
- **If `x` is NOT in the dictionary:**  
    - It calls the function **recursively** for the two previous values:  
      â†’ `f(x - 1)` (the previous Fibonacci number)  
      â†’ `f(x - 2)` (the one before the previous)  
    - Adds them together and **stores the result in `memo[x]`**.  
    - Finally, it **returns the value**.

---

### ðŸ“Œ **5. Returning the Result:**
```python
return f(n)
```
- It calls the helper function `f(n)` to **start the calculation** for the input value `n`.  
- Thanks to memoization, your code **remembers previously calculated values** and avoids recalculating them, making the solution efficient.

---

### ðŸ’¡ **Example Walkthrough: `fib(5)`**
Let's trace how it works:
1. `fib(5)` â†’ calls `f(5)`
2. `f(5)` â†’ not in `memo`, so it calls:
    - `f(4)`  
    - `f(3)`  
3. `f(4)` calls:
    - `f(3)`  
    - `f(2)`  
4. `f(3)` calls:
    - `f(2)`  
    - `f(1)` â†’ Found in `memo`: returns `1`
5. `f(2)` calls:
    - `f(1)` â†’ Found in `memo`: returns `1`
    - `f(0)` â†’ Found in `memo`: returns `0`
    - Stores `f(2) = 1` in `memo`
6. Using the memoized results:
    - `f(3)` â†’ `1 + 1 = 2` â†’ Stores `f(3) = 2` in `memo`
    - `f(4)` â†’ `2 + 1 = 3` â†’ Stores `f(4) = 3` in `memo`
    - `f(5)` â†’ `3 + 2 = 5` â†’ Stores `f(5) = 5` in `memo`

âœ… Final result â†’ `5`

---

### ðŸš€ **Key Takeaway:**
- **Memoization** saves the previously calculated values in a dictionary, so you don't have to repeat the same calculations.  
- This makes the solution much **faster** compared to plain recursion. ðŸš€
